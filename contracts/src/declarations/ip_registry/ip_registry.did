type Result_3 = 
 variant {
   err: text;
   ok: nat;
 };
type Result_2 = 
 variant {
   err: text;
   ok: DisputeID;
 };
type Result_1 = 
 variant {
   err: text;
   ok: bool;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type License = 
 record {
   createdAt: int;
   id: nat;
   licensee: principal;
   royalty: nat;
   terms: text;
   valid: bool;
 };
type IpRecordPublic = 
 record {
   created: int;
   description: text;
   disputes: vec DisputeID;
   file_hash: text;
   id: IpID;
   licenses: vec License;
   owner: principal;
   stakes: nat;
   status: IPStatus;
   title: text;
   updated: int;
 };
type IpID = nat;
type IPStatus = 
 variant {
   Revoked;
   UnderDispute;
   Unverified;
   Verified;
 };
type EventKind = 
 variant {
   DisputeRaised: DisputeID;
   DisputeResolved: record {
                      DisputeID;
                      bool;
                    };
   DisputeVote: record {
                  DisputeID;
                  principal;
                  bool;
                };
   IpCreated: IpID;
   IpStaked: record {
               IpID;
               principal;
               nat;
             };
   LicenseIssued: record {
                    IpID;
                    principal;
                  };
 };
type Event = 
 record {
   kind: EventKind;
   timestamp: int;
 };
type DisputeID = nat;
service : {
  createIpRecord: (text, text, text) -> (IpID);
  finishUpload: (IpID, nat) -> (Result);
  getEvents: () -> (vec Event) query;
  getIp: (IpID) -> (opt IpRecordPublic) query;
  issueLicense: (IpID, principal, text, nat) -> (Result_3);
  listAllIPs: () -> (vec IpRecordPublic) query;
  raiseDispute: (IpID, text, nat) -> (Result_2);
  resolveDispute: (DisputeID) -> (Result_1);
  stake: (IpID, nat) -> (Result);
  updateTokenCanisterId: (text) -> ();
  uploadChunk: (IpID, nat, blob) -> (Result);
  voteOnDispute: (DisputeID, bool) -> (Result);
}
